package data;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.fasterxml.jackson.databind.ObjectMapper;

import entities.Todo;
import entities.User;

@Transactional
@Repository
public class TodoDAOImpl implements TodoDAO {
	
	@PersistenceContext
	private EntityManager em;

	@Override
	public List<Todo> index(int uid) {
		
//		User user = em.find(User.class, uid);
		
//		String userQuery = "SELECT DISTINCT u FROM User u";
//		List<Todo> userIndex = em.createQuery(userQuery, Todo.class).getResultList();
		
		String todoQuery = "SELECT DISTINCT t FROM Todo t WHERE t.user.id = :uid";
		List<Todo> todos = em.createQuery(todoQuery, Todo.class)
				.setParameter("uid", uid)
				.getResultList();
		
		return todos;
	}

	@Override
	public Todo show(int uid, int tid) {
		Todo todo = em.find(Todo.class, tid);
		if(todo == null || todo.getUser().getId() != uid) {
			return null;
		}
//		em.find(Todo.class, tid);
		return todo;
	}

	@Override
	public Todo create(int uid, String todoJson) {
		
		ObjectMapper mapper = new ObjectMapper();
		Todo todo = null;
		
		try {
			
			todo = mapper.readValue(todoJson, Todo.class);
			User user = em.find(User.class, uid);
			todo.setUser(user);
			em.persist(todo);
			em.flush();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return todo;
	}

	@Override
	public Todo update(int uid, int tid, String todoJson) {
		
		ObjectMapper mapper = new ObjectMapper();
		Todo updateTodo = null;
		try {
			updateTodo = mapper.readValue(todoJson, Todo.class);
			Todo oldTodo = em.find(Todo.class, tid);
			
			User user = em.find(User.class, uid);
			
			oldTodo.setTask(updateTodo.getTask());
			oldTodo.setDescription(updateTodo.getDescription());
			oldTodo.setCompleted(updateTodo.isCompleted());
			oldTodo.setUser(user);
			oldTodo.setDueDate(updateTodo.getDueDate());
			oldTodo.setCompleteDate(updateTodo.getCompleteDate());
//			em.persist(oldTodo);
			System.out.println("DAO: " + oldTodo);
			return oldTodo;
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return null;
	}

	@Override
	public boolean destroy(int uid, int tid) {
			
			try {
				
				Todo destroyTodo = em.find(Todo.class, tid);
				if(destroyTodo == null) {
					return false;
				}
				else {
					em.remove(destroyTodo);
					return true;
					
				}
			}
			catch (Exception e) {
				e.printStackTrace();
			}
			
			return false;
			
		}
	
	
}
