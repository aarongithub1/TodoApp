package data;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.fasterxml.jackson.databind.ObjectMapper;

import entities.Todo;
import entities.User;

@Transactional
@Repository
public class TodoDAOImpl implements TodoDAO {
	
	@PersistenceContext
	private EntityManager em;

	@Override
	public List<Todo> index(int uid) {
		String query = "SELECT DISTINCT t FROM Todo t";
		List<Todo> index = em.createQuery(query, Todo.class).getResultList();
		System.out.println(index);
		return index;
	}

	@Override
	public Todo show(int uid, int tid) {
		em.find(Todo.class, tid);
		em.find(User.class, uid);
		return null;
	}

	@Override
	public Todo create(int uid, String todoJson) {
		
		User user = em.find(User.class, uid);
		ObjectMapper mapper = new ObjectMapper();
		
		try {
			Todo newTodo = mapper.readValue(todoJson, Todo.class);
			newTodo.setUser(user);
			em.persist(newTodo);
			em.flush();
			return newTodo;
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return null;
	}

	@Override
	public Todo update(int uid, int tid, String todoJson) {
		
		ObjectMapper mapper = new ObjectMapper();
		
		try {
			User user = em.find(User.class, uid);
			Todo oldTodo = em.find(Todo.class, tid);
			
			Todo updateTodo = mapper.readValue(todoJson, Todo.class);
			
			oldTodo.setTask(updateTodo.getTask());
			oldTodo.setDescription(updateTodo.getDescription());
			oldTodo.setCompleted(updateTodo.isCompleted());
			oldTodo.setUser(user);
			oldTodo.setDueDate(updateTodo.getDueDate());
			oldTodo.setCompleteDate(updateTodo.getCompleteDate());
			em.persist(oldTodo);
			System.out.println("DAO: " + oldTodo);
			return oldTodo;
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return null;
	}

	@Override
	public boolean destroy(int uid, int tid) {
			
			try {
				User user = em.find(User.class, uid);
				
				Todo destroyTodo = em.find(Todo.class, tid);
				if(destroyTodo == null) {
					return false;
				}
				else {
					em.remove(destroyTodo);
					return true;
					
				}
			}
			catch (Exception e) {
				e.printStackTrace();
//				System.out.println("in DAO: false catch exception");
			}
			
			return false;
			
		}
	
	
}
